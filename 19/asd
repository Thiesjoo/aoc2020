'use strict'
const now = require("performance-now")

// Part 1
// ======
// ~0 ms - answer: 0

const part1 = input => {
	const start = now()
	let result = 0;

	let [rules1, data1] = input.split("\n\n");

	let rules = rules1.split("\n").map(x => {
		const [index, rule] = x.split(":")
		return { i: index, rules: rule.trim().split("|").map(y => y.trim().split(" ")) }
	})

	let data = data1.split("\n").map(x => x.split(""))

	rules.sort((a, b) => a.i - b.i)
	rules = expandRules(rules[0], rules)
	list(rules[0])
	const masterRule = compactRules(rules[0])
	list(masterRule)
	console.log(matchPart(["a", "a", "b"], masterRule, 0))


	const end = now()
	console.log('Execution time: ~%dms', (end - start).toFixed(3));

	return result
}

function matchPart(string, rule, fromIndex) {
	let lastIndex = -1;
	for (let i = fromIndex; i < rule.length; i++) {
		const element = rule[i];
		if (!Array.isArray(element)) {
			let res = string.findIndex((k, index) => index > lastIndex && k === element)
			console.log(res)
			if (res > -1)
		}
		console.log(element)
	}
}

function expandRules(rule, rules) {
	return rule.rules.map(x => {
		return x.map(z => {
			let int = parseInt(z)
			if (!isNaN(int)) {
				return expandRules(rules[int], rules)
			} else {
				return z.split('"').join("")
			}
		})
	})
}

function compactRules(arr) {
	if (!Array.isArray(arr)) {
		return arr
	} else if (arr.length === 1) {
		return compactRules(arr[0])
	}

	return arr.map(x => {
		if (Array.isArray(x)) {
			return compactRules(x)
		} else {
			return x
		}
	})
}

function list(rules) {
	console.log(JSON.stringify(rules, null, 3))
}

// Part 2
// ======
// ~0 ms - answer: 0

const part2 = input => {
	const start = now()
	let result = 0;

	const data = input.split("\n");

	const end = now()
	console.log('Execution time: ~%dms', (end - start).toFixed(3));

	return result
}

module.exports = { part1, part2 }
